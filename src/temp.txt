#ifndef BOARD_HAS_PSRAM
#error "Please enable PSRAM !!!"
#endif

#include <Arduino.h>
#include "epd_driver.h"
#include <WiFi.h>
#include <HTTPSServer.hpp>
#include "Networking/NetworkManager.h"
#include "Screen/ScreenManager.h"
#include "cert.h"
#include "private_key.h"

uint8_t *framebuffer = NULL;

httpsserver::SSLCert cert = httpsserver::SSLCert(
    example_crt_DER, example_crt_DER_len,
    example_key_DER, example_key_DER_len);

httpsserver::HTTPSServer STAServer = httpsserver::HTTPSServer(&cert);
httpsserver::HTTPServer APServer = httpsserver::HTTPServer();

TaskHandle_t networkT;
void networkTask(void *args);

void setup()
{
    Serial.begin(115200);
    framebuffer = (uint8_t *)ps_calloc(sizeof(uint8_t), EPD_WIDTH * EPD_HEIGHT / 2);
    if (!framebuffer)
    {
        Serial.println("alloc memory failed !!!");
        while (1){} //if allocation of framebuffer fails, make program dead
    }
    memset(framebuffer, 0xFF, EPD_WIDTH * EPD_HEIGHT / 2);

    epd_init();

    epd_poweron();
    epd_clear();
    epd_poweroff();

    WiFi.mode(WIFI_AP_STA);
    NetworkManager.begin(STAServer, APServer);
    // WiFi.begin("nazwa twojej sieci", "haslo");
    xTaskCreatePinnedToCore(networkTask, "Network Managing", 1024 * 50, NULL, 0, &networkT, 0); //create network task with 50kB stack, rest will be used for screen
}

void networkTask(void *args)
{
    while (true)
        NetworkManager.loop();
}

void loop()
{
    epd_poweron();
    int cursor_x = 50; // 200 war
    int cursor_y = 200;
    writeln((GFXfont *)&FiraSans, "siema siema kurwa witam", &cursor_x, &cursor_y, NULL);
    epd_draw_hline(10, random(10, EPD_HEIGHT), EPD_WIDTH - 20, 0, framebuffer);
    epd_draw_grayscale_image(epd_full_screen(), framebuffer);
    vTaskDelay(1000);

    epd_draw_rect(10, random(10, EPD_HEIGHT), random(10, 60), random(10, 120), 0, framebuffer);
    epd_draw_grayscale_image(epd_full_screen(), framebuffer);
    vTaskDelay(1000);

    epd_draw_circle(random(10, EPD_WIDTH), random(10, EPD_HEIGHT), 120, 0, framebuffer);
    epd_draw_grayscale_image(epd_full_screen(), framebuffer);
    vTaskDelay(1000);

    epd_fill_rect(10, random(10, EPD_HEIGHT), random(10, 60), random(10, 120), 0, framebuffer);
    epd_draw_grayscale_image(epd_full_screen(), framebuffer);
    vTaskDelay(1000);

    epd_fill_circle(random(10, EPD_WIDTH), random(10, EPD_HEIGHT), random(10, 160), 0, framebuffer);
    epd_draw_grayscale_image(epd_full_screen(), framebuffer);
    vTaskDelay(1000);

    memset(framebuffer, 0xFF, EPD_WIDTH * EPD_HEIGHT / 2);
    epd_clear();
    epd_poweroff();
}